[
    {
        "sourcePath": "lib/src/services/system_chrome.dart",
        "sourceLine": 388,
        "id": "services.SystemChrome.setSystemUIOverlayStyle.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "services",
        "element": "SystemChrome.setSystemUIOverlayStyle",
        "file": "services.SystemChrome.setSystemUIOverlayStyle.2.dart",
        "description": "The following example creates a widget that changes the status bar color\nto a random value on Android."
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 513,
        "id": "widgets.FocusableActionDetector.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusableActionDetector",
        "file": "widgets.FocusableActionDetector.1.dart",
        "description": "This example shows how keyboard interaction can be added to a custom control\nthat changes color when hovered and focused, and can toggle a light when\nactivated, either by touch or by hitting the `X` key on the keyboard when\nthe \"And Me\" button has the keyboard focus (be sure to use TAB to move the\nfocus to the \"And Me\" button before trying it out).\n\nThis example defines its own key binding for the `X` key, but in this case,\nthere is also a default key binding for [ActivateAction] in the default key\nbindings created by [WidgetsApp] (the parent for [MaterialApp], and\n[CupertinoApp]), so the `ENTER` key will also activate the buttons."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 994,
        "id": "material.Scaffold.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold",
        "file": "material.Scaffold.3.dart",
        "description": "This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a\n[FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order\nto center the text within the [Scaffold]. The [FloatingActionButton] is\ncentered and docked within the [BottomAppBar] using\n[FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is\nconnected to a callback that increments a counter.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)"
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1316,
        "id": "widgets.OrderedTraversalPolicy.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "OrderedTraversalPolicy",
        "file": "widgets.OrderedTraversalPolicy.1.dart",
        "description": "This sample shows how to assign a traversal order to a widget. In the\nexample, the focus order goes from bottom right (the \"One\" button) to top\nleft (the \"Six\" button)."
    },
    {
        "sourcePath": "lib/src/widgets/animated_switcher.dart",
        "sourceLine": 143,
        "id": "widgets.AnimatedSwitcher.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedSwitcher",
        "file": "widgets.AnimatedSwitcher.1.dart",
        "description": "This sample shows a counter that animates the scale of a text widget\nwhenever the value changes."
    },
    {
        "sourcePath": "lib/src/material/icon_button.dart",
        "sourceLine": 126,
        "id": "material.IconButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "IconButton",
        "file": "material.IconButton.1.dart",
        "description": "This sample shows an `IconButton` that uses the Material icon \"volume_up\" to\nincrease the volume.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/icon_button.png)"
    },
    {
        "sourcePath": "lib/src/material/chip.dart",
        "sourceLine": 255,
        "id": "material.DeletableChipAttributes.onDeleted.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DeletableChipAttributes.onDeleted",
        "file": "material.DeletableChipAttributes.onDeleted.1.dart",
        "description": "This sample shows how to use [onDeleted] to remove an entry when the\ndelete button is tapped."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 625,
        "id": "widgets.AnimatedContainer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedContainer",
        "file": "widgets.AnimatedContainer.1.dart",
        "description": "The following example (depicted above) transitions an AnimatedContainer\nbetween two states. It adjusts the [height], [width], [color], and\n[alignment] properties when tapped."
    },
    {
        "sourcePath": "lib/src/material/radio_list_tile.dart",
        "sourceLine": 293,
        "id": "material.RadioListTile.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "RadioListTile",
        "file": "material.RadioListTile.3.dart",
        "description": "![Custom radio list tile sample](https://flutter.github.io/assets-for-api-docs/assets/material/radio_list_tile_custom.png)\n\nHere is an example of a custom LabeledRadio widget, but you can easily\nmake your own configurable widget."
    },
    {
        "sourcePath": "lib/src/material/radio.dart",
        "sourceLine": 92,
        "id": "material.Radio.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Radio",
        "file": "material.Radio.1.dart",
        "description": "Here is an example of Radio widgets wrapped in ListTiles, which is similar\nto what you could get with the RadioListTile widget.\n\nThe currently selected character is passed into `groupValue`, which is\nmaintained by the example's `State`. In this case, the first `Radio`\nwill start off selected because `_character` is initialized to\n`SingingCharacter.lafayette`.\n\nIf the second radio button is pressed, the example's state is updated\nwith `setState`, updating `_character` to `SingingCharacter.jefferson`.\nThis causes the buttons to rebuild with the updated `groupValue`, and\ntherefore the selection of the second button.\n\nRequires one of its ancestors to be a [Material] widget."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 718,
        "id": "widgets.TransitionDelegate.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "TransitionDelegate",
        "file": "widgets.TransitionDelegate.1.dart",
        "description": "The following example demonstrates how to implement a subclass that always\nremoves or adds routes without animated transitions and puts the removed\nroutes at the top of the list."
    },
    {
        "sourcePath": "lib/src/material/text_form_field.dart",
        "sourceLine": 121,
        "id": "material.TextFormField.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "TextFormField",
        "file": "material.TextFormField.2.dart",
        "description": "This example shows how to move the focus to the next field when the user\npresses the ENTER key."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6087,
        "id": "widgets.MouseRegion.onExit.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "MouseRegion.onExit",
        "file": "widgets.MouseRegion.onExit.1.dart",
        "description": "The following example shows a blue rectangular that turns yellow when\nhovered. Since the hover state is completely contained within a widget\nthat unconditionally creates the `MouseRegion`, you can ignore the\naforementioned restriction."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1168,
        "id": "material.Scaffold.drawer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.drawer",
        "file": "material.Scaffold.drawer.1.dart",
        "description": "To disable the drawer edge swipe, set the\n[Scaffold.drawerEnableOpenDragGesture] to false. Then, use\n[ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close\nit."
    },
    {
        "sourcePath": "lib/src/material/dropdown.dart",
        "sourceLine": 787,
        "id": "material.DropdownButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DropdownButton",
        "file": "material.DropdownButton.1.dart",
        "description": "This sample shows a `DropdownButton` with a large arrow icon,\npurple text style, and bold purple underline, whose value is one of \"One\",\n\"Two\", \"Free\", or \"Four\".\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/dropdown_button.png)"
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 337,
        "id": "widgets.NestedScrollViewState.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "NestedScrollViewState",
        "file": "widgets.NestedScrollViewState.1.dart",
        "description": "[NestedScrollViewState] can be obtained using a [GlobalKey].\nUsing the following setup, you can access the inner scroll controller\nusing `globalKey.currentState.innerController`."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 4544,
        "id": "widgets.Expanded.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Expanded",
        "file": "widgets.Expanded.1.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Column] so that\nit's middle child, a [Container] here, expands to fill the space.\n\n![This results in two thin blue boxes with a larger amber box in between.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_column.png)"
    },
    {
        "sourcePath": "lib/src/material/dropdown.dart",
        "sourceLine": 995,
        "id": "material.DropdownButton.style.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DropdownButton.style",
        "file": "material.DropdownButton.style.1.dart",
        "description": "This sample shows a `DropdownButton` with a dropdown button text style\nthat is different than its menu items."
    },
    {
        "sourcePath": "lib/src/material/card.dart",
        "sourceLine": 97,
        "id": "material.Card.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Card",
        "file": "material.Card.2.dart",
        "description": "This sample shows creation of a [Card] widget that can be tapped. When\ntapped this [Card]'s [InkWell] displays an \"ink splash\" that fills the\nentire card."
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 786,
        "id": "focus_manager.FocusNode.unfocus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "focus_manager",
        "element": "FocusNode.unfocus",
        "file": "focus_manager.FocusNode.unfocus.1.dart",
        "description": "This example shows the difference between the different [UnfocusDisposition]\nvalues for [unfocus].\n\nTry setting focus on the four text fields by selecting them, and then\nselect \"UNFOCUS\" to see what happens when the current\n[FocusManager.primaryFocus] is unfocused.\n\nTry pressing the TAB key after unfocusing to see what the next widget\nchosen is."
    },
    {
        "sourcePath": "lib/src/material/text_field.dart",
        "sourceLine": 255,
        "id": "material.TextField.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "TextField",
        "file": "material.TextField.2.dart",
        "description": "This sample shows how to get a value from a TextField via the [onSubmitted]\ncallback."
    },
    {
        "sourcePath": "lib/src/widgets/overscroll_indicator.dart",
        "sourceLine": 76,
        "id": "widgets.GlowingOverscrollIndicator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "GlowingOverscrollIndicator",
        "file": "widgets.GlowingOverscrollIndicator.1.dart",
        "description": "This example demonstrates how to use a [NestedScrollView] to manipulate the\nplacement of a [GlowingOverscrollIndicator] when building a\n[CustomScrollView]. Drag the scrollable to see the bounds of the overscroll\nindicator."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 994,
        "id": "material.Scaffold.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold",
        "file": "material.Scaffold.1.dart",
        "description": "This example shows a [Scaffold] with a [body] and [FloatingActionButton].\nThe [body] is a [Text] placed in a [Center] in order to center the text\nwithin the [Scaffold]. The [FloatingActionButton] is connected to a\ncallback that increments a counter.\n\n![The Scaffold has a white background with a blue AppBar at the top. A blue FloatingActionButton is positioned at the bottom right corner of the Scaffold.](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold.png)"
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 391,
        "id": "widgets.SliverFillRemaining.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.1.dart",
        "description": "In this sample the [SliverFillRemaining] sizes its [child] to fill the\nremaining extent of the viewport in both axes. The icon is centered in the\nsliver, and would be in any computed extent for the sliver."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 391,
        "id": "widgets.SliverFillRemaining.4",
        "channel": "stable",
        "serial": "4",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.4.dart",
        "description": "In this sample the [SliverFillRemaining]'s child stretches to fill the\noverscroll area when [fillOverscroll] is true. This sample also features a\nbutton that is pinned to the bottom of the sliver, regardless of size or\noverscroll behavior. Try switching [fillOverscroll] to see the difference.\n\nThis sample only shows the overscroll behavior on devices that support\noverscroll."
    },
    {
        "sourcePath": "lib/src/widgets/media_query.dart",
        "sourceLine": 287,
        "id": "widgets.MediaQueryData.systemGestureInsets.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "MediaQueryData.systemGestureInsets",
        "file": "widgets.MediaQueryData.systemGestureInsets.1.dart",
        "description": "For apps that might be deployed on Android Q devices with full gesture\nnavigation enabled, use [MediaQuery.systemGestureInsets] with [Padding]\nto avoid having the left and right edges of the [Slider] from appearing\nwithin the area reserved for system gesture navigation.\n\nBy default, [Slider]s expand to fill the available width. So, we pad the\nleft and right sides."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 270,
        "id": "widgets.Focus.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "Focus",
        "file": "widgets.Focus.2.dart",
        "description": "This example shows how to wrap another widget in a [Focus] widget to make it\nfocusable. It wraps a [Container], and changes the container's color when it\nis set as the [FocusManager.primaryFocus].\n\nIf you also want to handle mouse hover and/or keyboard actions on a widget,\nconsider using a [FocusableActionDetector], which combines several different\nwidgets to provide those capabilities."
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 406,
        "id": "widgets.FocusNode.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusNode",
        "file": "widgets.FocusNode.1.dart",
        "description": "This example shows how a FocusNode should be managed if not using the\n[Focus] or [FocusScope] widgets. See the [Focus] widget for a similar\nexample using [Focus] and [FocusScope] widgets."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2445,
        "id": "material.InputDecoration.4",
        "channel": "stable",
        "serial": "4",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.4.dart",
        "description": "This sample shows how to style a `TextField` with a round border and\nadditional text before and after the input area. It displays \"Prefix\" before\nthe input area, and \"Suffix\" after the input area.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_prefix_suffix.png)"
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 824,
        "id": "widgets.FocusScope.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusScope",
        "file": "widgets.FocusScope.1.dart",
        "description": "This example demonstrates using a [FocusScope] to restrict focus to a particular\nportion of the app. In this case, restricting focus to the visible part of a\nStack."
    },
    {
        "sourcePath": "lib/src/material/switch_list_tile.dart",
        "sourceLine": 245,
        "id": "material.SwitchListTile.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "SwitchListTile",
        "file": "material.SwitchListTile.3.dart",
        "description": "![Custom switch list tile sample](https://flutter.github.io/assets-for-api-docs/assets/material/switch_list_tile_custom.png)\n\nHere is an example of a custom LabeledSwitch widget, but you can easily\nmake your own configurable widget."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 391,
        "id": "widgets.SliverFillRemaining.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.3.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the [precedingScrollExtent] of the [SliverConstraints] has gone\nbeyond that of the viewport's main axis."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 994,
        "id": "material.Scaffold.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold",
        "file": "material.Scaffold.2.dart",
        "description": "This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]\nand [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in\norder to center the text within the [Scaffold]. The [FloatingActionButton]\nis connected to a callback that increments a counter.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)"
    },
    {
        "sourcePath": "lib/src/material/checkbox_list_tile.dart",
        "sourceLine": 240,
        "id": "material.CheckboxListTile.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "CheckboxListTile",
        "file": "material.CheckboxListTile.3.dart",
        "description": "![Custom checkbox list tile sample](https://flutter.github.io/assets-for-api-docs/assets/material/checkbox_list_tile_custom.png)\n\nHere is an example of a custom LabeledCheckbox widget, but you can easily\nmake your own configurable widget."
    },
    {
        "sourcePath": "lib/src/material/data_table.dart",
        "sourceLine": 302,
        "id": "material.DataTable.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DataTable",
        "file": "material.DataTable.1.dart",
        "description": "This sample shows how to display a [DataTable] with three columns: name, age, and\nrole. The columns are defined by three [DataColumn] objects. The table\ncontains three rows of data for three example users, the data for which\nis defined by three [DataRow] objects.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/data_table.png)"
    },
    {
        "sourcePath": "lib/src/material/switch_list_tile.dart",
        "sourceLine": 245,
        "id": "material.SwitchListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SwitchListTile",
        "file": "material.SwitchListTile.1.dart",
        "description": "![SwitchListTile sample](https://flutter.github.io/assets-for-api-docs/assets/material/switch_list_tile.png)\n\nThis widget shows a switch that, when toggled, changes the state of a [bool]\nmember field called `_lights`."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2445,
        "id": "material.InputDecoration.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.3.dart",
        "description": "This sample shows how to create a `TextField` with hint text, a red border\non all sides, and an error message. To display a red border and error\nmessage, provide `errorText` to the `InputDecoration` constructor.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_error.png)"
    },
    {
        "sourcePath": "lib/src/cupertino/context_menu.dart",
        "sourceLine": 123,
        "id": "cupertino.CupertinoContextMenu.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoContextMenu",
        "file": "cupertino.CupertinoContextMenu.1.dart",
        "description": "This sample shows a very simple CupertinoContextMenu for an empty red\n100x100 Container. Simply long press on it to open."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 4959,
        "id": "widgets.Flow.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Flow",
        "file": "widgets.Flow.1.dart",
        "description": "This example uses the [Flow] widget to create a menu that opens and closes\nas it is interacted with, shown above. The color of the button in the menu\nchanges to indicate which one has been selected."
    },
    {
        "sourcePath": "lib/src/material/expansion_panel.dart",
        "sourceLine": 313,
        "id": "material.ExpansionPanelList.radio.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ExpansionPanelList.radio",
        "file": "material.ExpansionPanelList.radio.1.dart",
        "description": "Here is a simple example of how to implement ExpansionPanelList.radio."
    },
    {
        "sourcePath": "lib/src/material/stepper.dart",
        "sourceLine": 236,
        "id": "material.Stepper.controlsBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Stepper.controlsBuilder",
        "file": "material.Stepper.controlsBuilder.1.dart",
        "description": "Creates a stepper control with custom buttons."
    },
    {
        "sourcePath": "lib/src/material/app_bar.dart",
        "sourceLine": 166,
        "id": "material.AppBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AppBar",
        "file": "material.AppBar.1.dart",
        "description": "This sample shows an [AppBar] with two simple actions. The first action\nopens a [SnackBar], while the second action navigates to a new page."
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 268,
        "id": "widgets.AnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedList",
        "file": "widgets.AnimatedList.1.dart",
        "description": "This sample application uses an [AnimatedList] to create an effect when\nitems are removed or added to the list."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 1320,
        "id": "widgets.Navigator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Navigator",
        "file": "widgets.Navigator.1.dart",
        "description": "The following example demonstrates how a nested [Navigator] can be used to\npresent a standalone user registration journey.\n\nEven though this example uses two [Navigator]s to demonstrate nested\n[Navigator]s, a similar result is possible using only a single [Navigator].\n\nRun this example with `flutter run --route=/signup` to start it with\nthe signup flow instead of on the home page."
    },
    {
        "sourcePath": "lib/src/material/switch_list_tile.dart",
        "sourceLine": 245,
        "id": "material.SwitchListTile.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "SwitchListTile",
        "file": "material.SwitchListTile.2.dart",
        "description": "![Switch list tile semantics sample](https://flutter.github.io/assets-for-api-docs/assets/material/switch_list_tile_semantics.png)\n\nHere is an example of a custom labeled radio widget, called\nLinkedLabelRadio, that includes an interactive [RichText] widget that\nhandles tap gestures."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 117,
        "id": "widgets.AnimatedWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedWidget",
        "file": "widgets.AnimatedWidget.1.dart",
        "description": "This code defines a widget called `Spinner` that spins a green square\ncontinually. It is built with an [AnimatedWidget]."
    },
    {
        "sourcePath": "lib/src/material/bottom_sheet.dart",
        "sourceLine": 635,
        "id": "material.showModalBottomSheet.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "showModalBottomSheet",
        "file": "material.showModalBottomSheet.1.dart",
        "description": "This example demonstrates how to use `showModalBottomSheet` to display a\nbottom sheet that obscures the content behind it when a user taps a button.\nIt also demonstrates how to close the bottom sheet using the [Navigator]\nwhen a user taps on a button inside the bottom sheet."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 3007,
        "id": "material.InputDecoration.suffixIconConstraints.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration.suffixIconConstraints",
        "file": "material.InputDecoration.suffixIconConstraints.1.dart",
        "description": "This example shows the differences between two `TextField` widgets when\n[suffixIconConstraints] is set to the default value and when one is not.\n\nNote that [isDense] must be set to true to be able to\nset the constraints smaller than 48px.\n\nIf null, [BoxConstraints] with a minimum width and height of 48px is\nused."
    },
    {
        "sourcePath": "lib/src/material/bottom_navigation_bar.dart",
        "sourceLine": 137,
        "id": "material.BottomNavigationBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "BottomNavigationBar",
        "file": "material.BottomNavigationBar.1.dart",
        "description": "This example shows a [BottomNavigationBar] as it is used within a [Scaffold]\nwidget. The [BottomNavigationBar] has three [BottomNavigationBarItem]\nwidgets and the [currentIndex] is set to index 0. The selected item is\namber. The `_onItemTapped` function changes the selected item's index\nand displays a corresponding message in the center of the [Scaffold].\n\n![A scaffold with a bottom navigation bar containing three bottom navigation\nbar items. The first one is selected.](https://flutter.github.io/assets-for-api-docs/assets/material/bottom_navigation_bar.png)"
    },
    {
        "sourcePath": "lib/src/widgets/framework.dart",
        "sourceLine": 4318,
        "id": "widgets.ErrorWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "ErrorWidget",
        "file": "widgets.ErrorWidget.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1450,
        "id": "material.Scaffold.of.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.of",
        "file": "material.Scaffold.of.1.dart",
        "description": "Typical usage of the [Scaffold.of] function is to call it from within the\n`build` method of a child of a [Scaffold]."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 2006,
        "id": "material.ScaffoldState.showBottomSheet.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldState.showBottomSheet",
        "file": "material.ScaffoldState.showBottomSheet.1.dart",
        "description": "This example demonstrates how to use `showBottomSheet` to display a\nbottom sheet when a user taps a button. It also demonstrates how to\nclose a bottom sheet using the Navigator."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1228,
        "id": "material.Scaffold.endDrawer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.endDrawer",
        "file": "material.Scaffold.endDrawer.1.dart",
        "description": "To disable the drawer edge swipe, set the\n[Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use\n[ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to\nclose it."
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 734,
        "id": "widgets.SliverAnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverAnimatedList",
        "file": "widgets.SliverAnimatedList.1.dart",
        "description": "This sample application uses a [SliverAnimatedList] to create an animated\neffect when items are removed or added to the list."
    },
    {
        "sourcePath": "lib/src/material/radio_list_tile.dart",
        "sourceLine": 293,
        "id": "material.RadioListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RadioListTile",
        "file": "material.RadioListTile.1.dart",
        "description": "![RadioListTile sample](https://flutter.github.io/assets-for-api-docs/assets/material/radio_list_tile.png)\n\nThis widget shows a pair of radio buttons that control the `_character`\nfield. The field is of the type `SingingCharacter`, an enum."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6087,
        "id": "widgets.MouseRegion.onExit.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "MouseRegion.onExit",
        "file": "widgets.MouseRegion.onExit.2.dart",
        "description": "The following example shows a widget that hides its content one second\nafter behing hovered, and also exposes the enter and exit callbacks.\nBecause the widget conditionally creates the `MouseRegion`, and leaks the\nhover state, it needs to take the restriction into consideration. In this\ncase, since it has access to the event that triggers the disappearance of\nthe `MouseRegion`, it simply trigger the exit callback during that event\nas well."
    },
    {
        "sourcePath": "lib/src/material/floating_action_button.dart",
        "sourceLine": 123,
        "id": "material.FloatingActionButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FloatingActionButton",
        "file": "material.FloatingActionButton.1.dart",
        "description": "This example shows how to display a [FloatingActionButton] in a\n[Scaffold], with a pink [backgroundColor] and a thumbs up [Icon].\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/floating_action_button.png)"
    },
    {
        "sourcePath": "lib/src/widgets/tween_animation_builder.dart",
        "sourceLine": 114,
        "id": "widgets.TweenAnimationBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "TweenAnimationBuilder",
        "file": "widgets.TweenAnimationBuilder.1.dart",
        "description": "This example shows an [IconButton] that \"zooms\" in when the widget first\nbuilds (its size smoothly increases from 0 to 24) and whenever the button\nis pressed, it smoothly changes its size to the new target value of either\n48 or 24."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2839,
        "id": "material.InputDecoration.prefixIconConstraints.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration.prefixIconConstraints",
        "file": "material.InputDecoration.prefixIconConstraints.1.dart",
        "description": "This example shows the differences between two `TextField` widgets when\n[prefixIconConstraints] is set to the default value and when one is not.\n\nNote that [isDense] must be set to true to be able to\nset the constraints smaller than 48px.\n\nIf null, [BoxConstraints] with a minimum width and height of 48px is\nused."
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 853,
        "id": "widgets.EditableText.onChanged.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "EditableText.onChanged",
        "file": "widgets.EditableText.onChanged.1.dart",
        "description": "This example shows how onChanged could be used to check the TextField's\ncurrent value each time the user inserts or deletes a character."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 249,
        "id": "widgets.SlideTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SlideTransition",
        "file": "widgets.SlideTransition.1.dart",
        "description": "The following code implements the [SlideTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 457,
        "id": "widgets.StreamBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "StreamBuilder",
        "file": "widgets.StreamBuilder.1.dart",
        "description": "This sample shows a [StreamBuilder] that listens to a Stream that emits bids\nfor an auction. Every time the StreamBuilder receives a bid from the Stream,\nit will display the price of the bid below an icon. If the Stream emits an\nerror, the error is displayed below an error icon. When the Stream finishes\nemitting bids, the final price is displayed."
    },
    {
        "sourcePath": "lib/src/material/card.dart",
        "sourceLine": 97,
        "id": "material.Card.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Card",
        "file": "material.Card.1.dart",
        "description": "This sample shows creation of a [Card] widget that shows album information\nand two actions."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 210,
        "id": "widgets.SingleChildScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "SingleChildScrollView",
        "file": "widgets.SingleChildScrollView.2.dart",
        "description": "In this example, the column becomes either as big as viewport, or as big as\nthe contents, whichever is biggest."
    },
    {
        "sourcePath": "lib/src/material/icon_button.dart",
        "sourceLine": 126,
        "id": "material.IconButton.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "IconButton",
        "file": "material.IconButton.2.dart",
        "description": "In this sample the icon button's background color is defined with an [Ink]\nwidget whose child is an [IconButton]. The icon button's filled background\nis a light shade of blue, it's a filled circle, and it's as big as the\nbutton is.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/icon_button_background.png)"
    },
    {
        "sourcePath": "lib/src/material/chip.dart",
        "sourceLine": 255,
        "id": "chip.DeletableChipAttributes.onDeleted.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "chip",
        "element": "DeletableChipAttributes.onDeleted",
        "file": "chip.DeletableChipAttributes.onDeleted.1.dart",
        "description": "This sample shows how to use [onDeleted] to remove an entry when the\ndelete button is tapped."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2445,
        "id": "material.InputDecoration.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.2.dart",
        "description": "This sample shows how to style a \"collapsed\" `TextField` using an\n`InputDecorator`. The collapsed `TextField` surrounds the hint text and\ninput area with a border, but does not add padding around them.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_collapsed.png)"
    },
    {
        "sourcePath": "lib/src/material/checkbox_list_tile.dart",
        "sourceLine": 240,
        "id": "material.CheckboxListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "CheckboxListTile",
        "file": "material.CheckboxListTile.1.dart",
        "description": "![CheckboxListTile sample](https://flutter.github.io/assets-for-api-docs/assets/material/checkbox_list_tile.png)\n\nThis widget shows a checkbox that, when checked, slows down all animations\n(including the animation of the checkbox itself getting checked!).\n\nThis sample requires that you also import 'package:flutter/scheduler.dart',\nso that you can reference [timeDilation]."
    },
    {
        "sourcePath": "lib/src/material/about.dart",
        "sourceLine": 107,
        "id": "material.AboutListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AboutListTile",
        "file": "material.AboutListTile.1.dart",
        "description": "This sample shows two ways to open [AboutDialog]. The first one\nuses an [AboutListTile], and the second uses the [showAboutDialog] function."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1092,
        "id": "widgets.AnimatedBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedBuilder",
        "file": "widgets.AnimatedBuilder.1.dart",
        "description": "This code defines a widget that spins a green square continually. It is\nbuilt with an [AnimatedBuilder] and makes use of the [child] feature to\navoid having to rebuild the [Container] each time."
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 649,
        "id": "widgets.FutureBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FutureBuilder",
        "file": "widgets.FutureBuilder.1.dart",
        "description": "This sample shows a [FutureBuilder] that displays a loading spinner while it\nloads data. It displays a success icon and text if the [Future] completes\nwith a result, or an error icon and text if the [Future] completes with an\nerror. Assume the `_calculation` field is set by pressing a button elsewhere\nin the UI."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2445,
        "id": "material.InputDecoration.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.1.dart",
        "description": "This sample shows how to style a `TextField` using an `InputDecorator`. The\nTextField displays a \"send message\" icon to the left of the input area,\nwhich is surrounded by a border an all sides. It displays the `hintText`\ninside the input area to help the user understand what input is required. It\ndisplays the `helperText` and `counterText` below the input area.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration.png)"
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 391,
        "id": "widgets.SliverFillRemaining.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.2.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the child's extent exceeds that of the remaining extent of the\nviewport's main axis."
    },
    {
        "sourcePath": "lib/src/material/expansion_panel.dart",
        "sourceLine": 220,
        "id": "material.ExpansionPanelList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ExpansionPanelList",
        "file": "material.ExpansionPanelList.1.dart",
        "description": "Here is a simple example of how to implement ExpansionPanelList."
    },
    {
        "sourcePath": "lib/src/material/list_tile.dart",
        "sourceLine": 622,
        "id": "material.ListTile.4",
        "channel": "stable",
        "serial": "4",
        "package": "flutter",
        "library": "material",
        "element": "ListTile",
        "file": "material.ListTile.4.dart",
        "description": "Here is an example of a custom list item that resembles a Youtube related\nvideo list item created with [Expanded] and [Container] widgets.\n\n![Custom list item a](https://flutter.github.io/assets-for-api-docs/assets/widgets/custom_list_item_a.png)"
    },
    {
        "sourcePath": "lib/src/services/keyboard_key.dart",
        "sourceLine": 2046,
        "id": "services.PhysicalKeyboardKey.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "services",
        "element": "PhysicalKeyboardKey",
        "file": "services.PhysicalKeyboardKey.1.dart",
        "description": "This example shows how to detect if the user has selected the physical key\nto the right of the CAPS LOCK key."
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 786,
        "id": "widgets.FocusNode.unfocus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusNode.unfocus",
        "file": "widgets.FocusNode.unfocus.1.dart",
        "description": "This example shows the difference between the different [UnfocusDisposition]\nvalues for [unfocus].\n\nTry setting focus on the four text fields by selecting them, and then\nselect \"UNFOCUS\" to see what happens when the current\n[FocusManager.primaryFocus] is unfocused.\n\nTry pressing the TAB key after unfocusing to see what the next widget\nchosen is."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_theme.dart",
        "sourceLine": 87,
        "id": "widgets.InheritedTheme.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InheritedTheme",
        "file": "widgets.InheritedTheme.1.dart",
        "description": "This example demonstrates how `InheritedTheme.captureAll()` can be used\nto wrap the contents of a new route with the inherited themes that\nare present when the route is built - but are not present when route\nis actually shown.\n\nIf the same code is run without `InheritedTheme.captureAll(), the\nnew route's Text widget will inherit the \"something must be wrong\"\nfallback text style, rather than the default text style defined in MyApp."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 270,
        "id": "widgets.Focus.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "Focus",
        "file": "widgets.Focus.3.dart",
        "description": "This example shows how to focus a newly-created widget immediately after it\nis created.\n\nThe focus node will not actually be given the focus until after the frame in\nwhich it has requested focus is drawn, so it is OK to call\n[FocusNode.requestFocus] on a node which is not yet in the focus tree."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 270,
        "id": "widgets.Focus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Focus",
        "file": "widgets.Focus.1.dart",
        "description": "This example shows how to manage focus using the [Focus] and [FocusScope]\nwidgets. See [FocusNode] for a similar example that doesn't use [Focus] or\n[FocusScope]."
    },
    {
        "sourcePath": "lib/src/material/radio_list_tile.dart",
        "sourceLine": 293,
        "id": "material.RadioListTile.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "RadioListTile",
        "file": "material.RadioListTile.2.dart",
        "description": "![Radio list tile semantics sample](https://flutter.github.io/assets-for-api-docs/assets/material/radio_list_tile_semantics.png)\n\nHere is an example of a custom labeled radio widget, called\nLinkedLabelRadio, that includes an interactive [RichText] widget that\nhandles tap gestures."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1450,
        "id": "material.Scaffold.of.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.of",
        "file": "material.Scaffold.of.2.dart",
        "description": "When the [Scaffold] is actually created in the same `build` function, the\n`context` argument to the `build` function can't be used to find the\n[Scaffold] (since it's \"above\" the widget being returned in the widget\ntree). In such cases, the following technique with a [Builder] can be used\nto provide a new scope with a [BuildContext] that is \"under\" the\n[Scaffold]:"
    },
    {
        "sourcePath": "lib/src/material/navigation_rail.dart",
        "sourceLine": 105,
        "id": "material.NavigationRail.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "NavigationRail",
        "file": "material.NavigationRail.1.dart",
        "description": "This example shows a [NavigationRail] used within a Scaffold with 3\n[NavigationRailDestination]s. The main content is separated by a divider\n(although elevation on the navigation rail can be used instead). The\n`_selectedIndex` is updated by the `onDestinationSelected` callback."
    },
    {
        "sourcePath": "lib/src/widgets/image.dart",
        "sourceLine": 768,
        "id": "widgets.Image.frameBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Image.frameBuilder",
        "file": "widgets.Image.frameBuilder.1.dart",
        "description": "The following sample demonstrates how to use this builder to implement an\nimage that fades in once it's been loaded.\n\nThis sample contains a limited subset of the functionality that the\n[FadeInImage] widget provides out of the box."
    },
    {
        "sourcePath": "lib/src/widgets/image.dart",
        "sourceLine": 873,
        "id": "widgets.Image.errorBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Image.errorBuilder",
        "file": "widgets.Image.errorBuilder.1.dart",
        "description": "The following sample uses [errorBuilder] to show a '😢' in place of the\nimage that fails to load, and prints the error to the console."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 4544,
        "id": "widgets.Expanded.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "Expanded",
        "file": "widgets.Expanded.2.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Row] with multiple\nchildren expanded, utilizing the [flex] factor to prioritize available space.\n\n![This results in a wide amber box, followed by a thin blue box, with a medium width amber box at the end.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_row.png)"
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 936,
        "id": "widgets.EditableText.onSubmitted.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "EditableText.onSubmitted",
        "file": "widgets.EditableText.onSubmitted.1.dart",
        "description": "When a non-completion action is pressed, such as \"next\" or \"previous\", it\nis often desirable to move the focus to the next or previous field.  To do\nthis, handle it as in this example, by calling [FocusNode.focusNext] in\nthe [TextFormField.onFieldSubmitted] callback ([TextFormField] wraps\n[EditableText] internally, and uses the value of `onFieldSubmitted` as its\n[onSubmitted])."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 210,
        "id": "widgets.SingleChildScrollView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SingleChildScrollView",
        "file": "widgets.SingleChildScrollView.1.dart",
        "description": "In this example, the children are spaced out equally, unless there's no more\nroom, in which case they stack vertically and scroll.\n\nWhen using this technique, [Expanded] and [Flexible] are not useful, because\nin both cases the \"available space\" is infinite (since this is in a viewport).\nThe next section describes a technique for providing a maximum height constraint."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5615,
        "id": "widgets.Listener.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Listener",
        "file": "widgets.Listener.1.dart",
        "description": "This example makes a [Container] react to being touched, showing a count of\nthe number of pointer downs and ups."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1434,
        "id": "widgets.SliverAnimatedOpacity.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverAnimatedOpacity",
        "file": "widgets.SliverAnimatedOpacity.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] and a\n[FloatingActionButton]. Pressing the button animates the lists' opacity."
    },
    {
        "sourcePath": "lib/src/material/ink_well.dart",
        "sourceLine": 964,
        "id": "material.InkWell.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InkWell",
        "file": "material.InkWell.1.dart",
        "description": "Tap the container to cause it to grow. Then, tap it again and hold before\nthe widget reaches its maximum size to observe the clipped ink splash."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5871,
        "id": "widgets.MouseRegion.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "MouseRegion",
        "file": "widgets.MouseRegion.1.dart",
        "description": "This example makes a [Container] react to being entered by a mouse\npointer, showing a count of the number of entries and exits."
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 120,
        "id": "widgets.TextEditingController.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "TextEditingController",
        "file": "widgets.TextEditingController.1.dart",
        "description": "This example creates a [TextField] with a [TextEditingController] whose\nchange listener forces the entered text to be lower case and keeps the\ncursor at the end of the input."
    },
    {
        "sourcePath": "lib/src/material/flexible_space_bar.dart",
        "sourceLine": 141,
        "id": "material.FlexibleSpaceBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FlexibleSpaceBar",
        "file": "material.FlexibleSpaceBar.1.dart",
        "description": "This sample application demonstrates the different features of the\n[FlexibleSpaceBar] when used in a [SliverAppBar]. This app bar is configured\nto stretch into the overscroll space, and uses the\n[FlexibleSpaceBar.stretchModes] to apply `fadeTitle`, `blurBackground` and\n`zoomBackground`. The app bar also makes use of [CollapseMode.parallax] by\ndefault."
    },
    {
        "sourcePath": "lib/src/widgets/image.dart",
        "sourceLine": 836,
        "id": "widgets.Image.loadingBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Image.loadingBuilder",
        "file": "widgets.Image.loadingBuilder.1.dart",
        "description": "The following sample uses [loadingBuilder] to show a\n[CircularProgressIndicator] while an image loads over the network."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_notifier.dart",
        "sourceLine": 128,
        "id": "widgets.InheritedNotifier.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InheritedNotifier",
        "file": "widgets.InheritedNotifier.1.dart",
        "description": "This example shows three spinning squares that use the value of the notifier\non an ancestor [InheritedNotifier] (`SpinModel`) to give them their\nrotation. The [InheritedNotifier] doesn't need to know about the children,\nand the `notifier` argument doesn't need to be an animation controller, it\ncan be anything that implements [Listenable] (like a [ChangeNotifier]).\n\nThe `SpinModel` class could just as easily listen to another object (say, a\nseparate object that keeps the value of an input or data model value) that\nis a [Listenable], and get the value from that. The descendants also don't\nneed to have an instance of the [InheritedNotifier] in order to use it, they\njust need to know that there is one in their ancestry. This can help with\ndecoupling widgets from their models."
    },
    {
        "sourcePath": "lib/src/widgets/form.dart",
        "sourceLine": 72,
        "id": "widgets.Form.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Form",
        "file": "widgets.Form.1.dart",
        "description": "This example shows a [Form] with one [TextFormField] to enter an email\naddress and a [RaisedButton] to submit the form. A [GlobalKey] is used here\nto identify the [Form] and validate input.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/widgets/form.png)"
    },
    {
        "sourcePath": "lib/src/services/keyboard_key.dart",
        "sourceLine": 124,
        "id": "services.LogicalKeyboardKey.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "services",
        "element": "LogicalKeyboardKey",
        "file": "services.LogicalKeyboardKey.1.dart",
        "description": "This example shows how to detect if the user has selected the logical \"Q\"\nkey."
    },
    {
        "sourcePath": "lib/src/animation/curves.dart",
        "sourceLine": 426,
        "id": "animation.Curve2D.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "animation",
        "element": "Curve2D",
        "file": "animation.Curve2D.1.dart",
        "description": "This example shows how to use a [Curve2D] to modify the position of a widget\nso that it can follow an arbitrary path."
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1582,
        "id": "widgets.FocusTraversalGroup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusTraversalGroup",
        "file": "widgets.FocusTraversalGroup.1.dart",
        "description": "This sample shows three rows of buttons, each grouped by a\n[FocusTraversalGroup], each with different traversal order policies. Use tab\ntraversal to see the order they are traversed in.  The first row follows a\nnumerical order, the second follows a lexical order (ordered to traverse\nright to left), and the third ignores the numerical order assigned to it and\ntraverses in widget order."
    },
    {
        "sourcePath": "lib/src/material/checkbox_list_tile.dart",
        "sourceLine": 240,
        "id": "material.CheckboxListTile.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "CheckboxListTile",
        "file": "material.CheckboxListTile.2.dart",
        "description": "![Checkbox list tile semantics sample](https://flutter.github.io/assets-for-api-docs/assets/material/checkbox_list_tile_semantics.png)\n\nHere is an example of a custom labeled checkbox widget, called\nLinkedLabelCheckbox, that includes an interactive [RichText] widget that\nhandles tap gestures."
    },
    {
        "sourcePath": "lib/src/material/floating_action_button.dart",
        "sourceLine": 123,
        "id": "material.FloatingActionButton.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "FloatingActionButton",
        "file": "material.FloatingActionButton.2.dart",
        "description": "This example shows how to make an extended [FloatingActionButton] in a\n[Scaffold], with a  pink [backgroundColor], a thumbs up [Icon] and a\n[Text] label that reads \"Approve\".\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/floating_action_button_label.png)"
    },
    {
        "sourcePath": "lib/src/material/dropdown.dart",
        "sourceLine": 935,
        "id": "material.DropdownButton.selectedItemBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DropdownButton.selectedItemBuilder",
        "file": "material.DropdownButton.selectedItemBuilder.1.dart",
        "description": "This sample shows a `DropdownButton` with a button with [Text] that\ncorresponds to but is unique from [DropdownMenuItem]."
    },
    {
        "sourcePath": "lib/src/material/raised_button.dart",
        "sourceLine": 101,
        "id": "material.RaisedButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RaisedButton",
        "file": "material.RaisedButton.1.dart",
        "description": "This sample shows how to render a disabled RaisedButton, an enabled RaisedButton\nand lastly a RaisedButton with gradient background.\n\n![Three raised buttons, one enabled, another disabled, and the last one\nstyled with a blue gradient background](https://flutter.github.io/assets-for-api-docs/assets/material/raised_button.png)"
    },
    {
        "sourcePath": "lib/src/material/divider.dart",
        "sourceLine": 73,
        "id": "material.Divider.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Divider",
        "file": "material.Divider.1.dart",
        "description": "This sample shows how to display a Divider between an orange and blue box\ninside a column. The Divider is 20 logical pixels in height and contains a\nvertically centered black line that is 5 logical pixels thick. The black\nline is indented by 20 logical pixels.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/divider.png)"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 645,
        "id": "widgets.SliverFadeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFadeTransition",
        "file": "widgets.SliverFadeTransition.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] that uses a\n[SliverFadeTransition] to fade the list in and out."
    },
    {
        "sourcePath": "lib/src/material/list_tile.dart",
        "sourceLine": 622,
        "id": "material.ListTile.5",
        "channel": "stable",
        "serial": "5",
        "package": "flutter",
        "library": "material",
        "element": "ListTile",
        "file": "material.ListTile.5.dart",
        "description": "Here is an example of an article list item with multiline titles and\nsubtitles. It utilizes [Row]s and [Column]s, as well as [Expanded] and\n[AspectRatio] widgets to organize its layout.\n\n![Custom list item b](https://flutter.github.io/assets-for-api-docs/assets/widgets/custom_list_item_b.png)"
    }
]